export interface AntiScrapeOptions { includeMeta?: boolean; includeComment?: boolean; includeSpan?: boolean; honeyLink?: boolean; randomZeroWidth?: boolean; }
export interface AntiScrapeResult { html: string; token: string; }
export function generateCanaryToken(): string { const letters = () => Array.from({length:3+Math.floor(Math.random()*3)},()=> String.fromCharCode(65+Math.floor(Math.random()*26))).join(''); const digits = () => String(Math.floor(100000+Math.random()*900000)); return letters()+'-'+digits(); }
function obfuscateToken(token: string, opts: AntiScrapeOptions): string { if (!opts.randomZeroWidth) return token; const zw = ['\u200B','\u200C','\u200D']; return token.split('').map(ch=> ch + (Math.random()<0.25? zw[Math.floor(Math.random()*zw.length)] : '')).join(''); }
export function buildAntiScrapeHTML(baseHtml: string, opts: AntiScrapeOptions = {}): AntiScrapeResult { const token = generateCanaryToken(); const obf = obfuscateToken(token, opts); const parts: string[] = []; if (opts.includeMeta !== false) parts.push(`<meta name="saw-canary" content="${token}">`); if (opts.includeComment !== false) parts.push(`<!-- saw-canary:${token} -->`); if (opts.includeSpan !== false) parts.push(`<span style="display:none" data-saw-canary="1">${obf}</span>`); if (opts.honeyLink) parts.push(`<a href="/__${token.toLowerCase()}__" style="display:none">${obf}</a>`); let augmented = baseHtml; const injection = '\n' + parts.join('\n') + '\n'; const bodyCloseRegex = /<\/body>/i; if (bodyCloseRegex.test(augmented)) augmented = augmented.replace(bodyCloseRegex, injection + '</body>'); else augmented += injection; return { html: augmented, token }; }
